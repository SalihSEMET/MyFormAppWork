<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        P5y5zZjfAAAAAElFTkSuQmCC
</value>
  </data>
</root>